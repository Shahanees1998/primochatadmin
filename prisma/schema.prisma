// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  email                String     @unique
  password             String
  firstName            String
  lastName             String
  phone                String?
  role                 UserRole   @default(MEMBER)
  status               UserStatus @default(PENDING)
  isDeleted            Boolean    @default(false)
  profileImage         String?
  profileImagePublicId String? // Cloudinary public_id for profile image
  membershipNumber     String?    @unique
  joinDate             DateTime?
  paidDate             DateTime? // Date when user paid membership
  lastLogin            DateTime?
  resetToken           String?
  resetTokenExpiry     DateTime?
  isPasswordChanged    Boolean    @default(false)
  // LCM (Local Cloud Messaging) for mobile push notifications
  lcmDeviceTokens      String[]   @default([]) // Array of device tokens for push notifications
  lcmEnabled           Boolean    @default(true) // Whether user has enabled push notifications
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  // Relations
  trestleBoards        TrestleBoardMember[]
  userCalendar         UserCalendar?
  customEvents         CustomEvent[]
  notifications        Notification[]
  messages             Message[]
  chatParticipants     ChatParticipant[]
  supportRequests      SupportRequest[]
  documents            Document[]
  documentCategories   DocumentCategory[]
  phoneBookEntry       PhoneBookEntry?
  announcements        Announcement[]
  moderator            Moderator?
  festiveBoards        FestiveBoard[]
  userMealSelections   UserMealSelection[]
  adminSignups         TrestleBoardMember[] @relation("AdminSignups")
  createdTrestleBoards TrestleBoard[]       @relation("CreatedTrestleBoards")

  @@map("users")
}

model TrestleBoard {
  id           String               @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  date         DateTime
  time         String? // Time in HH:MM format
  location     String?
  category     TrestleBoardCategory
  isRSVP       Boolean              @default(false)
  maxAttendees Int?
  createdById  String               @db.ObjectId
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  // Relations
  members        TrestleBoardMember[]
  createdBy      User                 @relation("CreatedTrestleBoards", fields: [createdById], references: [id], onDelete: Cascade)

    @@map("trestleBoards")
}

model TrestleBoardMember {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  trestleBoardId String     @db.ObjectId
  userId         String     @db.ObjectId
  status         RSVPStatus @default(PENDING)
  signedUpBy     String?    @db.ObjectId // Admin who signed up the user (if applicable)
  createdAt      DateTime   @default(now())

  // Relations
  trestleBoard   TrestleBoard @relation(fields: [trestleBoardId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  signedUpByUser User?        @relation("AdminSignups", fields: [signedUpBy], references: [id])

  @@unique([trestleBoardId, userId])
  @@map("trestle_board_members")
}

model UserCalendar {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  isDeleted       Boolean  @default(false)
  trestleBoardIds String[] @db.ObjectId // Array of trestle board IDs
  customEventIds  String[] @db.ObjectId // Array of custom event IDs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_calendars")
}

model CustomEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  userId    String   @db.ObjectId
  date      DateTime
  time      String? // Time in HH:MM format
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("custom_events")
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  title      String
  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  isArchived Boolean          @default(false)
  relatedId  String?          // ID of related entity (message, event, etc.)
  relatedType String?         // Type of related entity
  metadata   String?          // JSON string for additional data
  createdAt  DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model DocumentCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  description String?
  createdBy   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  documents Document[]

  @@map("document_categories")
}

model Document {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  fileName     String?
  fileUrl      String?
  filePublicId String? // Cloudinary public_id for download
  fileType     String?
  fileSize     Int?
  documentType String?            // Auto-determined document type (PDF, IMAGE, DOCUMENT, etc.)
  categoryId   String?            @db.ObjectId
  tags         String[]
  permissions  DocumentPermission @default(MEMBER_ONLY)
  uploadedBy   String             @db.ObjectId
  user         User               @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  category     DocumentCategory?  @relation(fields: [categoryId], references: [id])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("documents")
}

model ChatRoom {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  isGroup     Boolean  @default(false)
  isGroupChat Boolean  @default(false) // Type: group chat or individual chat
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  participants ChatParticipant[]
  messages     Message[]

  @@map("chat_rooms")
}

model ChatParticipant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatRoomId String   @db.ObjectId
  userId     String   @db.ObjectId
  joinedAt   DateTime @default(now())

  // Relations
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatRoomId, userId])
  @@map("chat_participants")
}

model Message {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  chatRoomId       String      @db.ObjectId
  senderId         String      @db.ObjectId
  content          String
  type             MessageType @default(TEXT)
  isRead           Boolean     @default(false)
  isFlagged        Boolean     @default(false)
  flagReason       String?
  isModerated      Boolean     @default(false)
  moderationAction String?
  createdAt        DateTime    @default(now())

  // Relations
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model SupportRequest {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  subject       String
  message       String
  status        SupportStatus @default(OPEN)
  priority      Priority      @default(MEDIUM)
  adminResponse String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_requests")
}

model PhoneBookEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  email     String
  phone     String?
  address   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("phone_book_entries")
}

model Announcement {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  type        AnnouncementType
  status      AnnouncementStatus @default(PUBLISHED)
  createdById String             @db.ObjectId
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  createdBy User @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("announcements")
}

model Moderator {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  permissions   String[]
  assignedAreas String[]
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("moderators")
}

// Enums
enum UserRole {
  MEMBER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  DEACTIVATED
}

enum TrestleBoardCategory {
  REGULAR_MEETING
  DISTRICT
  EMERGENT
  PRACTICE
  CGP
  SOCIAL
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  DECLINED
  MAYBE
}

enum ItemCategory {
  DESSERT
  SIDES
  DRINKS
  MAIN_COURSE
}

enum NotificationType {
  EVENT_UPDATE
  DOCUMENT_UPLOAD
  CHAT_MESSAGE
  BROADCAST
  SUPPORT_RESPONSE
  MEAL_SELECTION
  TRESTLE_BOARD_ADDED
  FESTIVE_BOARD_UPDATE
  USER_JOINED
  SYSTEM_ALERT
}

enum DocumentPermission {
  PUBLIC
  MEMBER_ONLY
  ADMIN_ONLY
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AnnouncementType {
  GENERAL
  IMPORTANT
  URGENT
  EVENT
  UPDATE
}

enum AnnouncementStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TargetAudience {
  ALL
  MEMBERS
  ADMINS
  NEW_MEMBERS
}

enum EventType {
  PERSONAL
  TRESTLE_BOARD
  SYSTEM
}

model SystemSettings {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  siteName            String
  siteDescription     String?
  contactEmail        String
  maxFileSize         Int      @default(10)
  allowedFileTypes    String   @default("pdf,doc,docx,jpg,jpeg,png")
  enableNotifications Boolean  @default(true)
  enableChat          Boolean  @default(true)
  enableTrestleBoards Boolean  @default(true)
  enableDocuments     Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("system_settings")
}

model MealCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  meals Meal[]

  @@map("meal_categories")
}

model Meal {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  imageUrl      String?
  imagePublicId String?
  categoryId    String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category          MealCategory       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  festiveBoardMeals FestiveBoardMeal[]

  @@map("meals")
}

model FestiveBoard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  month       Int // 1-12 for January to December
  year        Int
  title       String
  mainCourse  String?
  description String?
  createdById String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy      User                @relation(fields: [createdById], references: [id], onDelete: Cascade)
  meals          FestiveBoardMeal[]
  userSelections UserMealSelection[]

  @@unique([month, year], name: "month_year")
  @@map("festive_boards")
}

model FestiveBoardMeal {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  festiveBoardId String   @db.ObjectId
  mealId         String   @db.ObjectId
  createdAt      DateTime @default(now())

  // Relations
  festiveBoard   FestiveBoard        @relation(fields: [festiveBoardId], references: [id], onDelete: Cascade)
  meal           Meal                @relation(fields: [mealId], references: [id], onDelete: Cascade)
  userSelections UserMealSelection[]

  @@unique([festiveBoardId, mealId])
  @@map("festive_board_meals")
}

model UserMealSelection {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  festiveBoardId     String    @db.ObjectId
  festiveBoardMealId String    @db.ObjectId
  isCompleted        Boolean   @default(false)
  completedAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  festiveBoard     FestiveBoard     @relation(fields: [festiveBoardId], references: [id], onDelete: Cascade)
  festiveBoardMeal FestiveBoardMeal @relation(fields: [festiveBoardMealId], references: [id], onDelete: Cascade)

  @@unique([userId, festiveBoardMealId])
  @@map("user_meal_selections")
}
