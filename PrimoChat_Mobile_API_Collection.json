{
  "info": {
    "name": "PrimoChat Mobile API Collection",
    "description": "Complete API collection for PrimoChat mobile application using tested admin APIs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://primoochat.vercel.app/api",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "socket_url",
      "value": "https://primoochat.vercel.app",
      "type": "string"
    },
    {
      "key": "pusher_key",
      "value": "{{NEXT_PUBLIC_PUSHER_KEY}}",
      "type": "string"
    },
    {
      "key": "pusher_cluster",
      "value": "{{NEXT_PUBLIC_PUSHER_CLUSTER}}",
      "type": "string"
    },
    {
      "key": "festive_board_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "category_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "document_id",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Pusher Channels",
      "description": "Pusher channels for real-time notifications and chat",
      "item": [
        {
          "name": "Flutter Implementation Guide",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}",
              "host": ["{{base_url}}"]
            },
            "description": "See docs/PUSHER_FLUTTER_GUIDE.md for complete Flutter setup.\n\nChannels:\n- chat-{chatRoomId}: new-message, user-typing, message-read\n- user-{userId}: new-notification, notification-updated, all-notifications-read\n\nREST endpoints to trigger Pusher:\n- POST {{base_url}}/admin/chat/messages\n- POST {{base_url}}/socket/typing-start\n- POST {{base_url}}/socket/typing-stop\n- POST {{base_url}}/socket/mark-read\n\nEnv:\n- pusher_key: {{pusher_key}}\n- pusher_cluster: {{pusher_cluster}}"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Get User Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            }
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"oldpassword123\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/change-password",
              "host": ["{{base_url}}"],
              "path": ["users", "change-password"]
            }
          },
          "response": []
        },
        {
          "name": "Edit Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phone\": \"+1234567890\",\n  \"profileImage\": \"https://example.com/profile.jpg\",\n  \"profileImagePublicId\": \"profile_public_id\",\n  \"isPasswordChanged\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/edit-profile",
              "host": ["{{base_url}}"],
              "path": ["admin", "users", "profile"]
            },
            "description": "Update user profile information using the edit user API. When the ID is 'profile', the API automatically uses the authenticated user's ID. This endpoint supports updating names, phone, image, and isPasswordChanged field. The isPasswordChanged field is used by mobile apps to track password changes."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"phone\": \"+1234567890\",\n  \"profileImage\": \"https://example.com/profile.jpg\",\n  \"profileImagePublicId\": \"profile_public_id\",\n  \"isPasswordChanged\": true\n}"
                },
                "url": {
                  "raw": "{{base_url}}/users/edit-profile",
                  "host": ["{{base_url}}"],
                  "path": ["admin", "users", "profile"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"id\": \"user_id_here\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"user@example.com\",\n  \"phone\": \"+1234567890\",\n  \"role\": \"MEMBER\",\n  \"status\": \"ACTIVE\",\n  \"profileImage\": \"https://example.com/profile.jpg\",\n  \"profileImagePublicId\": \"profile_public_id\",\n  \"membershipNumber\": \"MB001\",\n  \"joinDate\": \"2024-01-01T00:00:00.000Z\",\n  \"paidDate\": \"2024-01-01T00:00:00.000Z\",\n  \"lastLogin\": \"2024-01-01T00:00:00.000Z\",\n  \"isPasswordChanged\": true,\n  \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n  \"updatedAt\": \"2024-01-01T00:00:00.000Z\"\n}"
            }
          ]
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/forgot-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "forgot-password"]
            }
          },
          "description": "Request a password reset email. The system will send a beautiful HTML email with a reset link that expires in 1 hour.",
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"user@example.com\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/forgot-password",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "forgot-password"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"message\": \"If an account with that email exists, a password reset link has been sent.\"\n}"
            }
          ]
        },
        {
          "name": "Validate Reset Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/validate-reset-token",
              "host": ["{{base_url}}"],
              "path": ["auth", "validate-reset-token"]
            }
          },
          "description": "Validate a password reset token before allowing the user to reset their password. This endpoint checks if the token is valid and not expired.",
          "response": [
            {
              "name": "Valid Token Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/validate-reset-token",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "validate-reset-token"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"message\": \"Token is valid\",\n  \"userId\": \"507f1f77bcf86cd799439011\"\n}"
            }
          ]
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/reset-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "reset-password"]
            }
          },
          "description": "Reset a user's password using a valid reset token. The password must be at least 6 characters long. After successful reset, the token is invalidated.",
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"password\": \"newpassword123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/reset-password",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "reset-password"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Password reset successfully\"\n}"
            }
          ]
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get All Users (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/users?page=1&limit=20&search=&status=",
              "host": ["{{base_url}}"],
              "path": ["admin", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "status",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Festive Boards",
      "item": [
        {
          "name": "Get All Festive Boards",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/festive-board?page=1&limit=20&search=&year=2024",
              "host": ["{{base_url}}"],
              "path": ["admin", "festive-board"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "year",
                  "value": "2024"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Festive Board Details with Meals",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/festive-board/{{festive_board_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "festive-board", "{{festive_board_id}}", "meals"]
            }
          },
          "response": []
        },
        {
          "name": "Select Meal for Festive Board",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"mealId\": \"{{meal_id}}\",\n  \"action\": \"select\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/festive-board/{{festive_board_id}}/selections",
              "host": ["{{base_url}}"],
              "path": ["admin", "festive-board", "{{festive_board_id}}", "selections"]
            }
          },
          "response": []
        },
        {
          "name": "Add Meal and Select for User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"festiveBoardId\": \"{{festive_board_id}}\",\n  \"title\": \"Meal Title\",\n  \"description\": \"Meal description\",\n  \"categoryId\": \"{{category_id}}\",\n  \"imageUrl\": \"https://example.com/image.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/festive-board/add-meal",
              "host": ["{{base_url}}"],
              "path": ["festive-board", "add-meal"]
            },
            "description": "Creates a new meal, adds it to the specified festive board, and automatically selects it for the authenticated user.\n\n**Required Fields:**\n- festiveBoardId: ID of the festive board\n- title: Meal title\n- categoryId: ID of the meal category\n\n**Optional Fields:**\n- description: Meal description\n- imageUrl: URL to meal image\n\n**Response:** Returns the created meal, festive board meal association, and user selection details."
          },
          "response": []
        },
        {
          "name": "Get User Meal Selections for Festive Board",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/festive-board/add-meal?festiveBoardId={{festive_board_id}}",
              "host": ["{{base_url}}"],
              "path": ["festive-board", "add-meal"],
              "query": [
                { "key": "festiveBoardId", "value": "{{festive_board_id}}" }
              ]
            },
            "description": "Retrieves all meal selections for the authenticated user in a specific festive board.\n\n**Query Parameters:**\n- festiveBoardId: ID of the festive board\n\n**Response:** Returns an array of meal selections with meal details, category information, and festive board details."
          },
          "response": []
        },
        {
          "name": "Get All My Meal Selections",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/users/meal-selections",
              "host": ["{{base_url}}"],
              "path": ["users", "meal-selections"]
            },
            "description": "Retrieves all meal selections for the authenticated user across all festive boards.\n\n**Response:** Returns both grouped selections (organized by festive board) and a flat list of all selections. Includes meal details, category information, festive board details, and selection status (completed/not completed).\n\n**Data Structure:**\n- groupedSelections: Array of festive boards with their meal selections\n- allSelections: Flat array of all meal selections\n- totalSelections: Total count of meal selections\n\n**Sorting:** Festive boards are sorted by year/month (most recent first), and meals within each board are sorted by selection date (most recent first)."
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  { "key": "Authorization", "value": "Bearer {{access_token}}" }
                ],
                "url": {
                  "raw": "{{base_url}}/users/meal-selections",
                  "host": ["{{base_url}}"],
                  "path": ["users", "meal-selections"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"totalSelections\": 5,\n    \"groupedSelections\": [\n      {\n        \"festiveBoard\": {\n          \"id\": \"festive_board_id\",\n          \"month\": 12,\n          \"year\": 2024,\n          \"title\": \"December 2024 Festive Board\",\n          \"description\": \"Holiday celebrations\",\n          \"createdAt\": \"2024-12-01T00:00:00.000Z\"\n        },\n        \"meals\": [\n          {\n            \"id\": \"selection_id\",\n            \"meal\": {\n              \"id\": \"meal_id\",\n              \"title\": \"Turkey Dinner\",\n              \"description\": \"Traditional holiday turkey\",\n              \"imageUrl\": \"https://example.com/turkey.jpg\",\n              \"category\": {\n                \"id\": \"category_id\",\n                \"name\": \"Main Course\",\n                \"description\": \"Main dish category\"\n              },\n              \"createdAt\": \"2024-12-01T00:00:00.000Z\"\n            },\n            \"isCompleted\": false,\n            \"completedAt\": null,\n            \"selectedAt\": \"2024-12-15T10:30:00.000Z\"\n          }\n        ]\n      }\n    ],\n    \"allSelections\": [\n      {\n        \"id\": \"selection_id\",\n        \"isCompleted\": false,\n        \"completedAt\": null,\n        \"selectedAt\": \"2024-12-15T10:30:00.000Z\",\n        \"festiveBoard\": {\n          \"id\": \"festive_board_id\",\n          \"month\": 12,\n          \"year\": 2024,\n          \"title\": \"December 2024 Festive Board\",\n          \"description\": \"Holiday celebrations\",\n          \"createdAt\": \"2024-12-01T00:00:00.000Z\"\n        },\n        \"meal\": {\n          \"id\": \"meal_id\",\n          \"title\": \"Turkey Dinner\",\n          \"description\": \"Traditional holiday turkey\",\n          \"imageUrl\": \"https://example.com/turkey.jpg\",\n          \"category\": {\n            \"id\": \"category_id\",\n            \"name\": \"Main Course\",\n            \"description\": \"Main dish category\"\n          },\n          \"createdAt\": \"2024-12-01T00:00:00.000Z\"\n        }\n      }\n    ]\n  },\n  \"message\": \"Found 5 meal selections across 3 festive boards\"\n}"
            }
          ]
        },
        {
          "name": "Deselect Meal for Festive Board",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"mealId\": \"{{meal_id}}\",\n  \"action\": \"deselect\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/festive-board/{{festive_board_id}}/selections",
              "host": ["{{base_url}}"],
              "path": ["admin", "festive-board", "{{festive_board_id}}", "selections"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Trestle Boards",
      "item": [
        {
          "name": "Get All Trestle Boards",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/trestle-board?page=1&limit=20&search=&category=",
              "host": ["{{base_url}}"],
              "path": ["admin", "trestle-board"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "category",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Signup for Trestle Board",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"6870ec4831a6be82b4cccbe1\",\n  \"trestleBoardId\": \"6879216632a53988f8f45b04\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/calendar",
              "host": ["{{base_url}}"],
              "path": ["admin", "calendar"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Calendar",
      "item": [
        {
          "name": "Get User Calendar (Admin)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/calendar?startDate=2024-01-01&endDate=2024-12-31&eventType=&userId={{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "calendar"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                },
                {
                  "key": "eventType",
                  "value": ""
                },
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get My Calendar Events",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/calendar?startDate=2024-01-01&endDate=2024-12-31&eventType=",
              "host": ["{{base_url}}"],
              "path": ["calendar"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                },
                {
                  "key": "eventType",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Custom Event to My Calendar",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"My Custom Event\",\n  \"description\": \"Event description\",\n  \"startDate\": \"2024-12-25\",\n  \"startTime\": \"14:00\",\n  \"location\": \"Event Location\",\n  \"eventType\": \"CUSTOM\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/calendar",
              "host": ["{{base_url}}"],
              "path": ["calendar"]
            }
          },
          "response": []
        },
        {
          "name": "Get Calendar Event Details",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/calendar/{{event_id}}",
              "host": ["{{base_url}}"],
              "path": ["calendar", "{{event_id}}"]
            },
            "description": "Fetch details for a specific calendar event (trestle board or custom) belonging to the authenticated user. One of 'trestleBoard' or 'customEvent' is populated; the other is null."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Notifications",
      "item": [
        {
          "name": "Get User Notifications",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/notifications?page=1&limit=20&status=all&type=&search=",
              "host": ["{{base_url}}"],
              "path": ["admin", "notifications"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "status",
                  "value": "all"
                },
                {
                  "key": "type",
                  "value": ""
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Unread Notifications Count",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/notifications/unread-count",
              "host": ["{{base_url}}"],
              "path": ["notifications", "unread-count"]
            },
            "description": "Get the count of unread notifications for the authenticated user. This is useful for displaying badge counts in the UI.\n\n**Response:**\n```json\n{\n  \"unreadCount\": 5,\n  \"userId\": \"user_id_here\"\n}\n```\n\n**Usage:**\n- Call this endpoint to get real-time unread count\n- Use for notification badge display\n- More efficient than fetching all notifications just for count"
          },
          "response": []
        },
        {
          "name": "Mark Notification as Read",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/notifications/{{notification_id}}?action=read",
              "host": ["{{base_url}}"],
              "path": ["admin", "notifications", "{{notification_id}}"],
              "query": [
                {
                  "key": "action",
                  "value": "read"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Mark All Notifications as Read",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/notifications?action=mark-all-read",
              "host": ["{{base_url}}"],
              "path": ["admin", "notifications"],
              "query": [
                {
                  "key": "action",
                  "value": "mark-all-read"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Archive Notification",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isArchived\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/notifications/{{notification_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "notifications", "{{notification_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Unarchive Notification",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isArchived\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/notifications/{{notification_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "notifications", "{{notification_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Notification",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/notifications/{{notification_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "notifications", "{{notification_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "LCM Push Notifications",
      "description": "Local Cloud Messaging for mobile push notifications",
      "item": [
        {
          "name": "Register Device Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"device_token_here\",\n  \"platform\": \"ios\",\n  \"appVersion\": \"1.0.0\",\n  \"deviceModel\": \"iPhone 14\",\n  \"osVersion\": \"iOS 16.0\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/lcm/register",
              "host": ["{{base_url}}"],
              "path": ["lcm", "register"]
            },
            "description": "Register a device token for push notifications. Call this when the app starts or when the token is refreshed.\n\nPlatform options: ios, android, web\n\nThis endpoint should be called:\n- On app startup\n- When push token is refreshed\n- After user login"
          },
          "response": []
        },
        {
          "name": "Unregister Device Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"device_token_here\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/lcm/unregister",
              "host": ["{{base_url}}"],
              "path": ["lcm", "unregister"]
            },
            "description": "Unregister a device token. Call this when the user logs out or uninstalls the app."
          },
          "response": []
        },
        {
          "name": "Get Notification Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/lcm/status",
              "host": ["{{base_url}}"],
              "path": ["lcm", "status"]
            },
            "description": "Get user's push notification status and registered devices."
          },
          "response": []
        },
        {
          "name": "Update Notification Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enabled\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/lcm/status",
              "host": ["{{base_url}}"],
              "path": ["lcm", "status"]
            },
            "description": "Enable or disable push notifications for the user."
          },
          "response": []
        }
      ]
    },
    {
      "name": "LCM Test Endpoints",
      "description": "Test endpoints for LCM functionality",
      "item": [
        {
          "name": "Test LCM Push Notification",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"title\": \"Test Notification\",\n  \"body\": \"This is a test push notification from LCM\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/test-lcm",
              "host": ["{{base_url}}"],
              "path": ["test-lcm"]
            },
            "description": "Send a test push notification to a specific user. Useful for testing LCM functionality."
          },
          "response": []
        },
        {
          "name": "Get User Device Count",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/test-lcm?userId={{user_id}}",
              "host": ["{{base_url}}"],
              "path": ["test-lcm"],
              "query": [
                {
                  "key": "userId",
                  "value": "{{user_id}}"
                }
              ]
            },
            "description": "Get the number of registered devices for a user."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Chat",
      "item": [
        {
          "name": "Get Chat Rooms",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/chat/rooms",
              "host": ["{{base_url}}"],
              "path": ["admin", "chat", "rooms"]
            }
          },
          "response": []
        },
        {
          "name": "Create Chat Room",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"participantIds\": [\"{{user_id_1}}\", \"{{user_id_2}}\"],\n  \"isGroup\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/chat/rooms",
              "host": ["{{base_url}}"],
              "path": ["admin", "chat", "rooms"]
            }
          },
          "response": []
        },
        {
          "name": "Start Direct Chat With User",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"participantIds\": [\"{{other_user_id}}\"],\n  \"isGroup\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/chat/rooms",
              "host": ["{{base_url}}"],
              "path": ["admin", "chat", "rooms"]
            }
          },
          "description": "Start or retrieve a direct chat with a specific user. If a direct chat already exists between the current user and the provided user, the existing room is returned; otherwise a new room is created.",
          "response": []
        },
        {
          "name": "Send Chat Message",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatRoomId\": \"{{room_id}}\",\n  \"content\": \"Hello!\",\n  \"type\": \"TEXT\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/chat/messages",
              "host": ["{{base_url}}"],
              "path": ["admin", "chat", "messages"]
            }
          },
          "response": []
        },
        {
          "name": "Get Chat Messages",
          "request": {
            "method": "GET",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/admin/chat/rooms/{{room_id}}/messages?page=1&limit=30&sortOrder=asc",
              "host": ["{{base_url}}"],
              "path": ["admin", "chat", "rooms", "{{room_id}}", "messages"],
              "query": [
                { "key": "page", "value": "1" },
                { "key": "limit", "value": "30" },
                { "key": "sortOrder", "value": "asc" }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Mark All Room Messages as Read",
          "request": {
            "method": "PATCH",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" }
            ],
            "url": {
              "raw": "{{base_url}}/admin/chat/rooms/{{room_id}}/mark-read",
              "host": ["{{base_url}}"],
              "path": ["admin", "chat", "rooms", "{{room_id}}", "mark-read"]
            },
            "description": "Marks all unread messages in the specified room as read for the authenticated user."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Support",
      "item": [
        {
          "name": "Get Support Requests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/support?page=1&limit=10&status=&priority=",
              "host": ["{{base_url}}"],
              "path": ["admin", "support"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": ""
                },
                {
                  "key": "priority",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Post Support Request",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"subject\": \"Issue Title\",\n  \"message\": \"Describe your issue here.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/support",
              "host": ["{{base_url}}"],
              "path": ["admin", "support"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Documents",
      "item": [
        {
          "name": "Get Documents",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/documents?page=1&limit=20&search=&category=&documentType=&permissions=",
              "host": ["{{base_url}}"],
              "path": ["admin", "documents"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "category",
                  "value": ""
                },
                {
                  "key": "documentType",
                  "value": ""
                },
                {
                  "key": "permissions",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Upload Document",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "title",
                  "value": "Sample Document",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "Sample document description",
                  "type": "text"
                },
                {
                  "key": "categoryId",
                  "value": "{{category_id}}",
                  "type": "text"
                },
                {
                  "key": "tags",
                  "value": "sample,test",
                  "type": "text"
                },
                {
                  "key": "permissions",
                  "value": "MEMBER_ONLY",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/admin/documents",
              "host": ["{{base_url}}"],
              "path": ["admin", "documents"]
            }
          },
          "response": []
        },
        {
          "name": "Get Document by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "documents", "{{document_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Document",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Document Title\",\n  \"description\": \"Updated description\",\n  \"categoryId\": \"{{category_id}}\",\n  \"tags\": [\"updated\", \"test\"],\n  \"permissions\": \"MEMBER_ONLY\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "documents", "{{document_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Document",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "documents", "{{document_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Document Categories",
      "item": [
        {
          "name": "Get Document Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/document-categories?page=1&limit=20&search=",
              "host": ["{{base_url}}"],
              "path": ["admin", "document-categories"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Document Category",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Sample Category\",\n  \"description\": \"Sample category description\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/document-categories",
              "host": ["{{base_url}}"],
              "path": ["admin", "document-categories"]
            }
          },
          "response": []
        },
        {
          "name": "Get Document Category by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/document-categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "document-categories", "{{category_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Document Category",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Category Title\",\n  \"description\": \"Updated category description\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/document-categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "document-categories", "{{category_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Document Category",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/document-categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "document-categories", "{{category_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Phonebook",
      "item": [
        {
          "name": "Get Phonebook",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/phonebook?page=1&limit=20&search=",
              "host": ["{{base_url}}"],
              "path": ["admin", "phonebook"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Dashboard",
      "item": [
        {
          "name": "Get Dashboard Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/dashboard",
              "host": ["{{base_url}}"],
              "path": ["admin", "dashboard"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Announcements",
      "item": [
        {
          "name": "Get Announcements",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/announcements?page=1&limit=20&search=&type=&status=",
              "host": ["{{base_url}}"],
              "path": ["admin", "announcements"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "search",
                  "value": ""
                },
                {
                  "key": "type",
                  "value": ""
                },
                {
                  "key": "status",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Meal Categories",
      "item": [
        {
          "name": "Get All Meal Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/meal/categories?page=1&limit=20&search=",
              "host": ["{{base_url}}"],
              "path": ["admin", "meal", "categories"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "search",
                  "value": ""
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Meal Category by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/meal/categories/{{category_id}}",
              "host": ["{{base_url}}"],
              "path": ["admin", "meal", "categories", "{{category_id}}"]
            }
          },
          "response": []
        }
      ]
    }
    ,
    {
      "name": "Socket via REST",
      "description": "HTTP endpoints that mirror Socket.IO actions for mobile apps.",
      "item": [
        {
          "name": "Join User Room (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/join-user",
              "host": ["{{base_url}}"],
              "path": ["socket", "join-user"]
            }
          },
          "response": []
        },
        {
          "name": "Join Chat Room (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatRoomId\": \"{{chat_room_id}}\",\n  \"userId\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/join-chat",
              "host": ["{{base_url}}"],
              "path": ["socket", "join-chat"]
            }
          },
          "response": []
        },
        {
          "name": "Leave Chat Room (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatRoomId\": \"{{chat_room_id}}\",\n  \"userId\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/leave-chat",
              "host": ["{{base_url}}"],
              "path": ["socket", "leave-chat"]
            }
          },
          "response": []
        },
        {
          "name": "Typing Start (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatRoomId\": \"{{chat_room_id}}\",\n  \"userId\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/typing-start",
              "host": ["{{base_url}}"],
              "path": ["socket", "typing-start"]
            }
          },
          "response": []
        },
        {
          "name": "Typing Stop (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatRoomId\": \"{{chat_room_id}}\",\n  \"userId\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/typing-stop",
              "host": ["{{base_url}}"],
              "path": ["socket", "typing-stop"]
            }
          },
          "response": []
        },
        {
          "name": "Mark Message Read (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chatRoomId\": \"{{chat_room_id}}\",\n  \"messageId\": \"{{message_id}}\",\n  \"userId\": \"{{user_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/mark-read",
              "host": ["{{base_url}}"],
              "path": ["socket", "mark-read"]
            }
          },
          "response": []
        },
        {
          "name": "Send LCM Push Notification (Admin)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{access_token}}" },
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sendToAll\": true,\n  \"title\": \"Test Push Notification\",\n  \"body\": \"This is a test push notification from the admin panel\",\n  \"data\": {\n    \"type\": \"test\",\n    \"action\": \"open_app\"\n  },\n  \"badge\": 1,\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/lcm/send",
              "host": ["{{base_url}}"],
              "path": ["admin", "lcm", "send"]
            },
            "description": "Send push notification to users. Admin access required.\n\nOptions:\n- sendToAll: true (send to all users)\n- userIds: [\"user_id_1\", \"user_id_2\"] (send to specific users)\n\nNotification fields:\n- title: Notification title\n- body: Notification message\n- data: Custom data payload\n- image: URL to notification image\n- badge: Badge count\n- sound: Sound file name\n- priority: high/normal\n- ttl: Time to live in seconds"
          },
          "response": []
        },
        {
          "name": "Send Test Event (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"room\": \"chat-{{chat_room_id}}\",\n  \"data\": { \"hello\": \"world\" }\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/test-event",
              "host": ["{{base_url}}"],
              "path": ["socket", "test-event"]
            }
          },
          "response": []
        },
        {
          "name": "Send Notification (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"notification\": {\n    \"title\": \"Test\",\n    \"message\": \"Hello from REST\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/notify",
              "host": ["{{base_url}}"],
              "path": ["socket", "notify"]
            }
          },
          "response": []
        },
        {
          "name": "Emit User Created (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{user_id}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/user-created",
              "host": ["{{base_url}}"],
              "path": ["socket", "user-created"]
            }
          },
          "response": []
        },
        {
          "name": "Emit Meal Selection (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"festiveBoardId\": \"{{festive_board_id}}\",\n  \"festiveBoardTitle\": \"Title\",\n  \"mealData\": {}\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/meal-selection",
              "host": ["{{base_url}}"],
              "path": ["socket", "meal-selection"]
            }
          },
          "response": []
        },
        {
          "name": "Emit Trestle Board Added (REST)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"{{trestle_board_id}}\",\n  \"title\": \"New Trestle Board\",\n  \"description\": \"Description\",\n  \"date\": \"2024-01-01T00:00:00.000Z\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/socket/trestle-board-added",
              "host": ["{{base_url}}"],
              "path": ["socket", "trestle-board-added"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}